/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package senales;
import java.awt.Color;
import java.awt.Graphics;
import java.util.StringTokenizer;
import java.util.ArrayList;
/**
 *
 * @author ararage_kun
 */
public class Senales extends javax.swing.JFrame {

    int ra,a,b,vec[], ivec[];
    
    public Senales() {
        initComponents();
    }

      /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Resultado = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        Responde = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        Gn = new javax.swing.JTextField();
        Hn = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        OrigenG = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        OrigenH = new javax.swing.JTextField();
        jPanel4 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        nText = new javax.swing.JTextField();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        valorInt = new javax.swing.JTextField();
        PanelH = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();

        PanelG = new javax.swing.JPanel(){
			
			public void paint(Graphics g){
				super.paint(g);
				g.setColor(Color.black);
				g.drawLine(250,0,250,500);
				g.drawLine(0,250,500,250);
                                
                                //g.drawOval(250-Integer.parseInt(r.getText()) * 10, 250-Integer.parseInt(r.getText()) * 10, Integer.parseInt(r.getText()) * 20,Integer.parseInt(r.getText()) * 20);
                                //g.drawString(""+Integer.parseInt(r.getText()) + "i", 250, 245 - Integer.parseInt(r.getText()) * 10);
                                g.drawLine(250,220,252,219);
                                g.drawString("3i", 250, 212);
			}
		};

        jLabel14 = new javax.swing.JLabel();

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 202, Short.MAX_VALUE)
        );

        jLabel11.setText("Su Gráfica de h(n)");

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel12.setText("Su Gráfica de g(n)");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Resultado.setEditable(false);
        Resultado.setBackground(new java.awt.Color(254, 254, 254));
        Resultado.setColumns(20);
        Resultado.setRows(5);
        jScrollPane1.setViewportView(Resultado);

        jLabel3.setText("Beta Ver 0.3");

        jLabel4.setText("Especifique la coordenada del ");

        jLabel7.setText("origen de Izquierda a derecha.");

        Responde.setEditable(false);
        Responde.setBackground(new java.awt.Color(254, 254, 254));
        Responde.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RespondeActionPerformed(evt);
            }
        });

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Introduzca en esta sección los datos correspondientes.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Carlito", 0, 12), new java.awt.Color(164, 164, 164))); // NOI18N

        jLabel1.setText("g(n) = ");

        jLabel2.setText("h(n)=");

        jLabel6.setText("Origen g(n) =");

        jLabel5.setText("Origen h(n) =");

        OrigenG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OrigenGActionPerformed(evt);
            }
        });

        jButton5.setText("Reset");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Graficar");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OrigenG, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(OrigenH, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton5)
                            .addComponent(jButton6)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addComponent(Hn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(Gn, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Gn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Hn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(OrigenG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton6)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel5)
                        .addComponent(OrigenH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Operaciones básicas.", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Carlito", 0, 12))); // NOI18N

        jButton1.setText("Suma");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Resta");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Multiplicacion");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("División");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton4))
                .addGap(0, 12, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Diezmación", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Carlito", 0, 12))); // NOI18N

        jLabel8.setFont(new java.awt.Font("Carlito", 0, 18)); // NOI18N
        jLabel8.setText("n=");

        jButton7.setText("Diezmación.");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(4, 4, 4)
                .addComponent(nText, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE)
                .addComponent(jButton7)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(nText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton7))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton8.setText("Interpolar");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Cero", "Escalon", "Lineal" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Tipo");

        jLabel10.setText("n /");

        valorInt.setText("Valor");

        PanelH.setBackground(new java.awt.Color(255, 255, 255));
        PanelH.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout PanelHLayout = new javax.swing.GroupLayout(PanelH);
        PanelH.setLayout(PanelHLayout);
        PanelHLayout.setHorizontalGroup(
            PanelHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        PanelHLayout.setVerticalGroup(
            PanelHLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 169, Short.MAX_VALUE)
        );

        jLabel13.setText("Su Gráfica de h(n)");

        PanelG.setBackground(new java.awt.Color(255, 255, 255));
        PanelG.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout PanelGLayout = new javax.swing.GroupLayout(PanelG);
        PanelG.setLayout(PanelGLayout);
        PanelGLayout.setHorizontalGroup(
            PanelGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 204, Short.MAX_VALUE)
        );
        PanelGLayout.setVerticalGroup(
            PanelGLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jLabel14.setText("Su Gráfica de g(n)");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Responde, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(valorInt, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 11, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9))
                        .addContainerGap())))
            .addGroup(layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(PanelG, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(54, 54, 54)
                        .addComponent(PanelH, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel3)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(119, 119, 119)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(Responde, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(9, 9, 9)
                        .addComponent(jLabel9)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(valorInt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(jButton8))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(PanelG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(PanelH, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
      
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        int tamG[];
        int tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        int Gh[];
        int Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        int Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Gh2[]; //Aqui estaran guardados los valores del origen para atras
        int Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        int total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        int total1a[];
        int total1[];// suma de los valores pero del orige pa atras
        
        int union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<Integer> lista = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        
        /*Definimos quienes serán los origenes de las funciones :D*/
        String OriG = OrigenG.getText().toString();
        String OriH = OrigenH.getText().toString();
        
        if(gn.equals("")||hn.equals("")||OriG.equals("")||OriH.equals("")||Integer.valueOf(OriH)<0||Integer.valueOf(OriG)<0){
            error.setVisible(true);
        }else{
        
        int OrG = Integer.valueOf(OriG);
        int OrH = Integer.valueOf(OriH);
          
       /*Estos nos sirven para definir el tamaño del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new int[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new int[cantH];
       
        if((cantG<=OrG-1) || (cantH<=OrH)){
           
        error.setVisible(true);
        } else{
               
        /*Separamos los datos de las comas y los guardamos en una lista :D*/
        for(String numero: gn.split(","))
            lista.add(new Integer(numero));
        
        for(String numero: hn.split(","))
            lista2.add(new Integer(numero));
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos :D*/
        Gh =  convierte.aMatriz(lista);
        for(int i = 0;i<Gh.length;i++){
            System.out.println("Se encuentra el valor "+Gh[i]+ "en la pos "+i);
        }
        Hh = convierte.aMatriz(lista2);
        for(int i = 0;i<Hh.length;i++){
            System.out.println("Se encuentra el valor "+Hh[i]+ "en la pos "+i);
        }
        ////////////////////////////////////////////////////////////////////
        
        /*Prueba de impresion si se guardan :p
        for(Integer i: lista){
            System.out.println(i);
        }
        for(Integer j: lista2){
            System.out.println(j);
        }*/
        
        
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
        Gh1 = define.origen(Gh, OrG);
        
        for(int i =0;i<Gh1.length;i++){
        System.out.println("Ahora se encuentra el valor "+Gh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Hh1 = define.origen(Hh, OrH);
        for(int i = 0;i<Hh1.length;i++){
            System.out.println("Ahora se encuentra el valor "+Hh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Gh2 =define.origen_a(Gh, OrG);
        Hh2 = define.origen_a(Hh, OrH);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
        /*total es el arreglo que contiene los valores desde el origen a los positivos
          total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
        :(*/
        total = calculando.sumaPosiciones(Gh1,Hh1);
        total1a = calculando.sumaPosiciones(Gh2,Hh2);
        /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
        acomodador :D*/
        total1 = define.acomodador(total1a); 
        
        for(int i = 0;i<total.length;i++){
          System.out.println("total Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        }
          for(int pq = 0;pq<total1.length;pq++){
          System.out.println("total1 Ahora tenemos el valor gracias a la suma: "+total1[pq]+ " en la posicion "+pq);
          }
        
        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Responde.setText("La sumita es: \n");
        Resultado.setText(null);
        union = new int[total.length+total1.length];
        System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total1.length+total.length;
        int z=0;
        int y;
        
       
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
       for(x=0; x<total1.length; x++){
                union[x]=total1[x];
                //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                if(x==(total1.length-1)){
                    for(y=total1.length;y<j;y++){
                        union[y]=total[z];
                  //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                        z++;
                    }
                }
              }
          //Prueba de for para imprimir la union
         for(int asd=0;asd<union.length;asd++){
             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
         }
         
         for(int pepe = 0;pepe<union.length;pepe++){
             Resultado.append(" "+union[pepe]);
         }
         
        }
      }
        
           
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        int tamG[];
        int tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        int Gh[];
        int Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        int Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Gh2[]; //Aqui estaran guardados los valores del origen para atras
        int Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        int total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        int total1[];
        int total1a[];
        int union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<Integer> lista = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        
        /*Definimos quienes serán los origenes de las funciones :D*/
        String OriG = OrigenG.getText().toString();
        String OriH = OrigenH.getText().toString();
        
           if(gn.equals("")||hn.equals("")||OriG.equals("")||OriH.equals("")||Integer.valueOf(OriH)<0||Integer.valueOf(OriG)<0){
            error.setVisible(true);
        }else{
        
        int OrG = Integer.valueOf(OriG);
        int OrH = Integer.valueOf(OriH);
        
          
        
        //////////////////////////////////////////
        
       /*Estos nos sirven para definir el tamaño del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new int[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new int[cantH];
        
        if((cantG<=OrG-1) || (cantH<=OrH)){
           
        error.setVisible(true);
        } else{
        
      //////////////////////////////////////////////////////////////
        
        /*Separamos los datos de las comas y los guardamos en una lista :D*/
        for(String numero: gn.split(","))
            lista.add(new Integer(numero));
        
        for(String numero: hn.split(","))
            lista2.add(new Integer(numero));
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos :D*/
        Gh =  convierte.aMatriz(lista);
        for(int i = 0;i<Gh.length;i++){
            System.out.println("Se encuentra el valor "+Gh[i]+ "en la pos "+i);
        }
        Hh = convierte.aMatriz(lista2);
        for(int i = 0;i<Hh.length;i++){
            System.out.println("Se encuentra el valor "+Hh[i]+ "en la pos "+i);
        }
        ////////////////////////////////////////////////////////////////////
        
        /*Prueba de impresion si se guardan :p
        for(Integer i: lista){
            System.out.println(i);
        }
        for(Integer j: lista2){
            System.out.println(j);
        }*/
        
        
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
        Gh1 = define.origen(Gh, OrG);
        
        for(int i =0;i<Gh1.length;i++){
        System.out.println("Ahora se encuentra el valor "+Gh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Hh1 = define.origen(Hh, OrH);
        for(int i = 0;i<Hh1.length;i++){
            System.out.println("Ahora se encuentra el valor "+Hh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Gh2 =define.origen_a(Gh, OrG);
        Hh2 = define.origen_a(Hh, OrH);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
        total = calculando.restaPosiciones(Gh1,Hh1);
        total1a = calculando.restaPosiciones(Gh2,Hh2);
        /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
        acomodador :D*/
        total1 = define.acomodador(total1a); 
        
        
        for(int i = 0;i<total.length;i++){
          System.out.println("total Ahora tenemos el valor gracias a la resta: "+total[i]+ " en la posicion "+i);
        }
          for(int pq = 0;pq<total1.length;pq++){
          System.out.println("total1 Ahora tenemos el valor gracias a la resta: "+total1[pq]+ " en la posicion "+pq);
          }
        
        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Responde.setText("La restita es: \n");
        Resultado.setText(null);
        
        union = new int[total.length+total1.length];
        System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total1.length+total.length;
        int z=0;
        int y;
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
       for(x=0; x<total1.length; x++){
                union[x]=total1[x];
                //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                if(x==(total1.length-1)){
                    for(y=total1.length;y<j;y++){
                        union[y]=total[z];
                  //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                        z++;
                    }
                }
              }
          //Prueba de for para imprimir la union
         for(int asd=0;asd<union.length;asd++){
             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
         }
         
         for(int pepe = 0;pepe<union.length;pepe++){
             Resultado.append(" "+union[pepe]);
         }
        }
      }
           
    
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
 Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        int tamG[];
        int tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        int Gh[];
        int Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        int Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Gh2[]; //Aqui estaran guardados los valores del origen para atras
        int Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        int total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        int total1[];
        int total1a[];
        int union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<Integer> lista = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        
        /*Definimos quienes serán los origenes de las funciones :D*/
        String OriG = OrigenG.getText().toString();
        String OriH = OrigenH.getText().toString();
        
           if(gn.equals("")||hn.equals("")||OriG.equals("")||OriH.equals("")||Integer.valueOf(OriH)<0||Integer.valueOf(OriG)<0){
            error.setVisible(true);
        }else{
        
        int OrG = Integer.valueOf(OriG);
        int OrH = Integer.valueOf(OriH);
        
          
        
        //////////////////////////////////////////
        
       /*Estos nos sirven para definir el tamaño del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new int[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new int[cantH];
        
        if((cantG<=OrG-1) || (cantH<=OrH)){
           
        error.setVisible(true);
        } else{
        
      //////////////////////////////////////////////////////////////
        
        /*Separamos los datos de las comas y los guardamos en una lista :D*/
        for(String numero: gn.split(","))
            lista.add(new Integer(numero));
        
        for(String numero: hn.split(","))
            lista2.add(new Integer(numero));
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos :D*/
        Gh =  convierte.aMatriz(lista);
        for(int i = 0;i<Gh.length;i++){
            System.out.println("Se encuentra el valor "+Gh[i]+ "en la pos "+i);
        }
        Hh = convierte.aMatriz(lista2);
        for(int i = 0;i<Hh.length;i++){
            System.out.println("Se encuentra el valor "+Hh[i]+ "en la pos "+i);
        }
        ////////////////////////////////////////////////////////////////////
        
        /*Prueba de impresion si se guardan :p
        for(Integer i: lista){
            System.out.println(i);
        }
        for(Integer j: lista2){
            System.out.println(j);
        }*/
        
        
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
        Gh1 = define.origen(Gh, OrG);
        
        for(int i =0;i<Gh1.length;i++){
        System.out.println("Ahora se encuentra el valor "+Gh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Hh1 = define.origen(Hh, OrH);
        for(int i = 0;i<Hh1.length;i++){
            System.out.println("Ahora se encuentra el valor "+Hh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Gh2 =define.origen_a(Gh, OrG);
        Hh2 = define.origen_a(Hh, OrH);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
        total = calculando.multiplicaPosiciones(Gh1,Hh1);
        total1a = calculando.multiplicaPosiciones(Gh2,Hh2);
        /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
        acomodador :D*/
        total1 = define.acomodador(total1a); 
        
        
        for(int i = 0;i<total.length;i++){
          System.out.println("total Ahora tenemos el valor gracias a la multiplicacion: "+total[i]+ " en la posicion "+i);
        }
          for(int pq = 0;pq<total1.length;pq++){
          System.out.println("total1 Ahora tenemos el valor gracias a la multiplicacion: "+total1[pq]+ " en la posicion "+pq);
          }
        
        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Responde.setText("La multiplicacion es: \n");
        Resultado.setText(null);
        
        union = new int[total.length+total1.length];
        System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total1.length+total.length;
        int z=0;
        int y;
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
       for(x=0; x<total1.length; x++){
                union[x]=total1[x];
                //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                if(x==(total1.length-1)){
                    for(y=total1.length;y<j;y++){
                        union[y]=total[z];
                  //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                        z++;
                    }
                }
              }
          //Prueba de for para imprimir la union
         for(int asd=0;asd<union.length;asd++){
             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
         }
         
         for(int pepe = 0;pepe<union.length;pepe++){
             Resultado.append(" "+union[pepe]);
         }
        }
      }        
           
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        int tamG[];
        int tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        int Gh[];
        int Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        int Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Gh2[]; //Aqui estaran guardados los valores del origen para atras
        int Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        int total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        int total1[];
        int total1a[];
        int union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<Integer> lista = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
       
        
        /*Definimos quienes serán los origenes de las funciones :D*/
        String OriG = OrigenG.getText().toString();
        String OriH = OrigenH.getText().toString();
        
        if(gn.equals("")||hn.equals("")||OriG.equals("")||OriH.equals("")||Integer.valueOf(OriH)<0||Integer.valueOf(OriG)<0){
            error.setVisible(true);
        }else{
        int OrG = Integer.valueOf(OriG);
        int OrH = Integer.valueOf(OriH);
        
        
        
       /*Estos nos sirven para definir el tamaño del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new int[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new int[cantH];
        System.out.println("Tengo "+cantG+" elementos");
        
        
        if((cantG<=OrG-1) || (cantH<=OrH)){
           
        error.setVisible(true);
        } else{
        
      //////////////////////////////////////////////////////////////
        
             /*Separamos los datos de las comas y los guardamos en una lista :D*/
           for(String numero: gn.split(","))
               lista.add(new Integer(numero));
        
           for(String numero: hn.split(","))
               lista2.add(new Integer(numero));
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos :D*/
            Gh =  convierte.aMatriz(lista);
                for(int i = 0;i<Gh.length;i++){
                    System.out.println("Se encuentra el valor "+Gh[i]+ "en la pos "+i);
                 }
             Hh = convierte.aMatriz(lista2);
                for(int i = 0;i<Hh.length;i++){
                    System.out.println("Se encuentra el valor "+Hh[i]+ "en la pos "+i);
                 }
        /*Prueba de impresion si se guardan :p
        for(Integer i: lista){
            System.out.println(i);
        }
        for(Integer j: lista2){
            System.out.println(j);
        }*/
        
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
             Gh1 = define.origen(Gh, OrG);
             for(int i =0;i<Gh1.length;i++){
                System.out.println("Ahora se encuentra el valor "+Gh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
              }
        
              Hh1 = define.origen(Hh, OrH);
              for(int i = 0;i<Hh1.length;i++){
                System.out.println("Ahora se encuentra el valor "+Hh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
              }
        
               Gh2 =define.origen_a(Gh, OrG);
               Hh2 = define.origen_a(Hh, OrH);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
                total = calculando.multiplicaPosiciones(Gh1,Hh1);
                total1 = calculando.multiplicaPosiciones(Gh2,Hh2);
        /*for(int i = 0;i<total.length;i++){
          System.out.println("Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        }*/
        
        /*y ahora imprimimos en nuestra cajita las sumitas  :D*/
               for(int i = 0;i<total.length;i++){
          System.out.println("total Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        }
          for(int pq = 0;pq<total1.length;pq++){
          System.out.println("total1 Ahora tenemos el valor gracias a la suma: "+total1[pq]+ " en la posicion "+pq);
          }
        
        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Responde.setText("La multiplicacion es: \n");
        union = new int[total.length+total1.length];
        System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total1.length+total.length;
        int z=0;
        int y;
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
       for(x=0; x<total1.length; x++){
                union[x]=total1[x];
                //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                if(x==(total1.length-1)){
                    for(y=total1.length;y<j;y++){
                        union[y]=total[z];
                  //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                        z++;
                    }
                }
              }
          //Prueba de for para imprimir la union
         for(int asd=0;asd<union.length;asd++){
             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
         }
         
         for(int pepe = 0;pepe<union.length;pepe++){
             Resultado.append(" "+union[pepe]);
         }
         
        }
      }
     

    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        Resultado.setText("");
        Responde.setText("");
        Gn.setText("");
        Hn.setText("");
        OrigenG.setText("");
        OrigenH.setText("");
              
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        Error error = new Error();
      
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        int tamG[];
        int tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        int Gh[];
        int Hh[];
        
        int x;
        String res="";
        
        /*Aqui estan las acomodadas*/
        int Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Gh2[]; //Aqui estaran guardados los valores del origen para atras
        int Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        int total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        int total1a[];
        int total1[];// suma de los valores pero del orige pa atras
        
        int union[];
////////////////////////////////////////////
        
        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<Integer> lista = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        //////////////////////////////////////////
        
        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();
        
        
        /*Definimos quienes serán los origenes de las funciones :D*/
        String OriG = OrigenG.getText().toString();
        String OriH = OrigenH.getText().toString();
        
        /*Definimos la caja de texto donde se multiplicara por n la convolucion*/
        String conV = nText.getText().toString();
        
        if(conV.equals("")||Integer.valueOf(conV)<=0 ||gn.equals("")||hn.equals("")||OriG.equals("")||OriH.equals("")||Integer.valueOf(OriH)<0||Integer.valueOf(OriG)<0){
            error.setVisible(true);
        }else{
        
        int OrG = Integer.valueOf(OriG);
        int OrH = Integer.valueOf(OriH);
        int conV1 = Integer.valueOf(conV);
       /*Estos nos sirven para definir el tamaño del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new int[cantG];
        
        int cantH = define.cant_var(hn);
        tamH = new int[cantH];
       
        if((cantG<=OrG-1) || (cantH<=OrH)){
           
        error.setVisible(true);
        } else{
               
        /*Separamos los datos de las comas y los guardamos en una lista :D*/
        for(String numero: gn.split(","))
            lista.add(new Integer(numero));
        
        for(String numero: hn.split(","))
            lista2.add(new Integer(numero));
        ///////////////////////////////////////////////////////////////////
        
        /*Guardamos las listas en arreglos :D*/
        Gh =  convierte.aMatriz(lista);
        for(int i = 0;i<Gh.length;i++){
            System.out.println("Se encuentra el valor "+Gh[i]+ "en la pos "+i);
        }
        Hh = convierte.aMatriz(lista2);
        for(int i = 0;i<Hh.length;i++){
            System.out.println("Se encuentra el valor "+Hh[i]+ "en la pos "+i);
        }
        ////////////////////////////////////////////////////////////////////
        
        /*Prueba de impresion si se guardan :p
        for(Integer i: lista){
            System.out.println(i);
        }
        for(Integer j: lista2){
            System.out.println(j);
        }*/
        
        
        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
        Gh1 = define.origen(Gh, OrG);
        
        for(int i =0;i<Gh1.length;i++){
        System.out.println("Ahora se encuentra el valor "+Gh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Hh1 = define.origen(Hh, OrH);
        for(int i = 0;i<Hh1.length;i++){
            System.out.println("Ahora se encuentra el valor "+Hh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }
        
        Gh2 =define.origen_a(Gh, OrG);
        Hh2 = define.origen_a(Hh, OrH);
        
        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
        /*total es el arreglo que contiene los valores desde el origen a los positivos
          total2 es el arreglo que contiene los valores desde el origen para atras pero los tiene invertidos
        :(*/
        total = calculando.diezmaPosiciones(Gh1,conV1); //Los de adelante
      //  total1a = calculando.diezmaPosiciones(Gh2,conV1);
        /*en total 1 ya tenemos el arreglo acomodadito gracias a nuestro super mega metodo
        acomodador :D*/
        //total1 = define.acomodador(total1a); //Los de atras :D
        /*
        for(int i = 0;i<total.length;i++){
          System.out.println("total Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        }
          for(int pq = 0;pq<total1.length;pq++){
          System.out.println("total1 Ahora tenemos el valor gracias a la suma: "+total1[pq]+ " en la posicion "+pq);
          }
        */
        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Responde.setText("La convolucion es: \n");
        Resultado.setText(null);
        
        union = new int[total.length];
        //System.out.println("El arreglo de los totales tiene: "+total.length+" espacios");
        //System.out.println("El arreglo de los totales tiene: "+total1.length+" espacios");
        //System.out.println("El arreglo de los totales tiene: "+(total1.length + total.length)+" espacios");
        int j=total.length;
        int z=0;
        int y;
        
       
        /*En este for agregamos los valores del origen pa adelante y del origen pa atras en un nuevo
        arreglo llamado union*/
      
        //AQUI TE QUEDASTE :D
        /*for(x=0; x<total1.length; x++){
                union[x]=total1[x];
                //System.out.println("Se ha agregado el valor "+total1[x]+" en la posicion "+x);
                if(x==(total1.length-1)){
                    for(y=total1.length;y<j;y++){
                        union[y]=total[z];
                  //    System.out.println("Se ha agregado el valor "+total[z]+" en la posicion "+y);
                        z++;
                    }
                }
              }/*
          //Prueba de for para imprimir la union
       /*  for(int asd=0;asd<union.length;asd++){
             System.out.println("Se tiene el valor "+union[asd] +" en la pos "+asd);
         }
         */
         for(int pepe = 0;pepe<union.length;pepe++){
             Resultado.append(" "+union[pepe]);
         }
         
        }
      }
        
        
         
        
      
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:

        Define define = new Define();
        Convertidor convierte = new Convertidor();
        Calcula calculando = new Calcula();
        /*Arreglos donde guardaremos los datos de las listas y donde se haran las operaciones*/
        int tamG[];
        int tamH[];
        /*Estas dos son sobre las que se haran los calculos*/
        int Gh[];
        int Hh[];

        int x;
        String res="";

        /*Aqui estan las acomodadas*/
        int Gh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Hh1[]; //Aqui estaran guardados los valores del origen para adeltane
        int Gh2[]; //Aqui estaran guardados los valores del origen para atras
        int Hh2[]; //Aqui estaran guardados los valores del origen para adeltane
        int total[]; /*Aqui esta la suma de los valores pero del origen para adelante de la suma de Gh y Hh*/
        int total2[];
        ////////////////////////////////////////////

        /*Declaramos las listas donde se guardaran los datos*/
        ArrayList<Integer> lista = new ArrayList<Integer>();
        ArrayList<Integer> lista2 = new ArrayList<Integer>();
        //////////////////////////////////////////

        /*Aqui guardamos las cajas de teto*/
        String gn = Gn.getText().toString();
        String hn = Hn.getText().toString();

        /*Definimos quienes serán los origenes de las funciones :D*/
        int OrG = Integer.valueOf(OrigenG.getText().toString());
        int OrH = Integer.valueOf(OrigenH.getText().toString());
        //////////////////////////////////////////

        /*Estos nos sirven para definir el tamaño del arreglo*/
        int cantG = define.cant_var(gn);
        tamG = new int[cantG];

        int cantH = define.cant_var(hn);
        tamH = new int[cantH];

        //////////////////////////////////////////////////////////////

        /*Separamos los datos de las comas y los guardamos en una lista :D*/
        for(String numero: gn.split(","))
        lista.add(new Integer(numero));

        for(String numero: hn.split(","))
        lista2.add(new Integer(numero));
        ///////////////////////////////////////////////////////////////////

        /*Guardamos las listas en arreglos :D*/
        Gh =  convierte.aMatriz(lista);
        for(int i = 0;i<Gh.length;i++){
            System.out.println("Se encuentra el valor "+Gh[i]+ "en la pos "+i);
        }
        Hh = convierte.aMatriz(lista2);
        for(int i = 0;i<Hh.length;i++){
            System.out.println("Se encuentra el valor "+Hh[i]+ "en la pos "+i);
        }
        ////////////////////////////////////////////////////////////////////

        /*Prueba de impresion si se guardan :p
        for(Integer i: lista){
            System.out.println(i);
        }
        for(Integer j: lista2){
            System.out.println(j);
        }*/

        /*Ahora identificaremos cuales son los origenes de cada funcion, solo se obtendra un nuevo arreglito
        a partir de nuestro origen y sumaremos esa parte, la parte que esta atras del origen
        pues las definiremos despues y se sumaran en otra seccion :D*/
        Gh1 = define.origen(Gh, OrG);

        for(int i =0;i<Gh1.length;i++){
            System.out.println("Ahora se encuentra el valor "+Gh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }

        Hh1 = define.origen(Hh, OrH);
        for(int i = 0;i<Hh1.length;i++){
            System.out.println("Ahora se encuentra el valor "+Hh1[i]+" en la posicion "+i+" del nuevo arreglo :D");
        }

        Gh2 =define.origen_a(Gh, OrG);
        Hh2 = define.origen_a(Hh, OrH);

        //Obtengamos el tipo de interpolacion
        int tipo=0;
        String inTipo = jComboBox1.getSelectedItem().toString();

        if(inTipo.equals("Cero"))
        tipo = 0;
        if(inTipo.equals("Escalon"))
        tipo = 1;
        if(inTipo.equals("Lineal"))
        tipo = 2;

        //Obtengamos el valor de interpolacion
        int valor = Integer.valueOf(valorInt.getText().toString());

        /*Los dos cachos desde el origen para adelante los enviaremos a un nuevo metodo
        donde se sumaran y se guardaran en un arreglito :D*/
        /*total es el arreglo que contiene los valores desde el origen a los positivos
        total2 es el arreglo que contiene los valores desde el origen para atras :D*/
        total = calculando.interpolaPosiciones(Gh1,Hh1,tipo,valor);
        total2 = calculando.interpolaPosiciones(Gh2,Hh2,tipo,valor);
        /*for(int i = 0;i<total.length;i++){
            System.out.println("Ahora tenemos el valor gracias a la suma: "+total[i]+ " en la posicion "+i);
        }*/

        /*y ahora imprimimos en nuestra cajita las sumitas (NOTA MORTAL: Faltan calcular los negativos e immprimirlos) :D*/
        Resultado.setText("Las cadenas interpoladas son: ");
        for(x=0; x<(total.length); x++){

        }

    }//GEN-LAST:event_jButton8ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void RespondeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RespondeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_RespondeActionPerformed

    private void OrigenGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OrigenGActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_OrigenGActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Senales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Senales().setVisible(true);
            }
        });
    }
    
    private javax.swing.JPanel G;
    private javax.swing.JPanel H;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField Gn;
    private javax.swing.JTextField Hn;
    private javax.swing.JTextField OrigenG;
    private javax.swing.JTextField OrigenH;
    private javax.swing.JPanel PanelG;
    private javax.swing.JPanel PanelH;
    private javax.swing.JTextField Responde;
    private javax.swing.JTextArea Resultado;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField nText;
    private javax.swing.JTextField valorInt;
    // End of variables declaration//GEN-END:variables
}

